package types// Common parameter and result typestype ClusterParams struct {    Name          string            `json:"name"`    ResourceGroup string            `json:"resource_group"`    Location      string            `json:"location"`    NodeCount     int               `json:"node_count"`    Tags          map[string]string `json:"tags,omitempty"`}type ClusterResult struct {    ID     string `json:"id"`    Status string `json:"status"`    URL    string `json:"url,omitempty"`}type ClusterInfo struct {    ID            string            `json:"id"`    Name          string            `json:"name"`    Status        string            `json:"status"`    Location      string            `json:"location"`    NodeCount     int               `json:"node_count"`    ResourceGroup string            `json:"resource_group,omitempty"`    Tags          map[string]string `json:"tags,omitempty"`}type MonitorParams struct {    Name          string `json:"name"`    ResourceGroup string `json:"resource_group"`    Location      string `json:"location"`    WorkspaceName string `json:"workspace_name"`}type MonitorResult struct {    ID        string   `json:"id"`    Status    string   `json:"status"`    Resources []string `json:"resources"`}type MonitorInfo struct {    ID            string `json:"id"`    Name          string `json:"name"`    Status        string `json:"status"`    ResourceGroup string `json:"resource_group"`    Location      string `json:"location"`}type BudgetParams struct {    Name          string  `json:"name"`    Amount        float64 `json:"amount"`    ResourceGroup string  `json:"resource_group"`    TimeGrain     string  `json:"time_grain"`}type BudgetResult struct {    ID     string `json:"id"`    Status string `json:"status"`}type BudgetInfo struct {    ID            string  `json:"id"`    Name          string  `json:"name"`    Amount        float64 `json:"amount"`    ResourceGroup string  `json:"resource_group"`    TimeGrain     string  `json:"time_grain"`}package providersimport (    "context"    "github.com/tronicum/punchbag-cube-testsuite/shared/types")// Provider defines the common interface for all cloud providerstype Provider interface {    // GetName returns the provider name (azure, aws, gcp, etc.)    GetName() string        // SimulationMode returns true if in simulation mode    SimulationMode() bool        // SetSimulationMode enables/disables simulation mode    SetSimulationMode(enabled bool)}// AzureProvider defines Azure-specific operationstype AzureProvider interface {    Provider        // Monitor operations    CreateMonitor(ctx context.Context, resourceGroup, location, workspaceName string) (*types.MonitorResult, error)        // Budget operations    CreateBudget(ctx context.Context, name string, amount float64, resourceGroup, timeGrain string) (*types.BudgetResult, error)        // AKS operations    CreateAKSCluster(ctx context.Context, name, resourceGroup, location string, nodeCount int) (*types.ClusterResult, error)}// ClusterProvider defines cluster-related operationstype ClusterProvider interface {    Provider    CreateCluster(ctx context.Context, params types.ClusterParams) (*types.ClusterResult, error)    DeleteCluster(ctx context.Context, clusterID string) error    ListClusters(ctx context.Context) ([]*types.ClusterInfo, error)}// MonitorProvider defines monitoring-related operationstype MonitorProvider interface {    Provider    CreateMonitor(ctx context.Context, params types.MonitorParams) (*types.MonitorResult, error)    DeleteMonitor(ctx context.Context, monitorID string) error    ListMonitors(ctx context.Context) ([]*types.MonitorInfo, error)}// BudgetProvider defines budget-related operationstype BudgetProvider interface {    Provider    CreateBudget(ctx context.Context, params types.BudgetParams) (*types.BudgetResult, error)    DeleteBudget(ctx context.Context, budgetID string) error    ListBudgets(ctx context.Context) ([]*types.BudgetInfo, error)}package azureimport (    "context"    "fmt"    "github.com/tronicum/punchbag-cube-testsuite/shared/providers"    "github.com/tronicum/punchbag-cube-testsuite/shared/types")// AzureProviderImpl implements the AzureProvider interfacetype AzureProviderImpl struct {    simulationMode bool    subscriptionID string    tenantID       string}// NewAzureProvider creates a new Azure providerfunc NewAzureProvider() providers.AzureProvider {    return &AzureProviderImpl{        simulationMode: false,    }}// GetName returns the provider namefunc (p *AzureProviderImpl) GetName() string {    return "azure"}// SimulationMode returns true if in simulation modefunc (p *AzureProviderImpl) SimulationMode() bool {    return p.simulationMode}// SetSimulationMode enables/disables simulation modefunc (p *AzureProviderImpl) SetSimulationMode(enabled bool) {    p.simulationMode = enabled}// CreateMonitor creates Azure Monitor resourcesfunc (p *AzureProviderImpl) CreateMonitor(ctx context.Context, resourceGroup, location, workspaceName string) (*types.MonitorResult, error) {    if p.simulationMode {        return &types.MonitorResult{            ID:        fmt.Sprintf("monitor-%s-%s", resourceGroup, workspaceName),            Status:    "created",            Resources: []string{"log-analytics", "application-insights", "metrics"},        }, nil    }    return nil, fmt.Errorf("direct mode not implemented yet")}// CreateBudget creates an Azure budgetfunc (p *AzureProviderImpl) CreateBudget(ctx context.Context, name string, amount float64, resourceGroup, timeGrain string) (*types.BudgetResult, error) {    if p.simulationMode {        return &types.BudgetResult{            ID:     fmt.Sprintf("budget-%s-%s", resourceGroup, name),            Status: "created",        }, nil    }    return nil, fmt.Errorf("direct mode not implemented yet")}// CreateAKSCluster creates an AKS clusterfunc (p *AzureProviderImpl) CreateAKSCluster(ctx context.Context, name, resourceGroup, location string, nodeCount int) (*types.ClusterResult, error) {    if p.simulationMode {        return &types.ClusterResult{            ID:     fmt.Sprintf("cluster-%s-%s", resourceGroup, name),            Status: "created",            URL:    fmt.Sprintf("https://%s.azmk8s.io", name),        }, nil    }    return nil, fmt.Errorf("direct mode not implemented yet")}